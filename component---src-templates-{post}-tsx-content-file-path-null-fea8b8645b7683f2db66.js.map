{"version":3,"file":"component---src-templates-{post}-tsx-content-file-path-null-fea8b8645b7683f2db66.js","mappings":"iJAAO,MAAMA,EAAa,CACxBC,QAAS,CACPA,SAAS,G,+ECGN,MAAMC,EAAaC,IAA0B,MAANA,EAC5C,OACEC,EAAAA,cAAA,OAAKC,UAAU,4BACbD,EAAAA,cAACE,EAAAA,EAAS,CAACC,QAAM,GAAE,aACf,C,oECHH,MAAMC,EAAUL,IAAiC,IAAhC,SAAEM,GAAwBN,EAChD,OAAOC,EAAAA,cAAA,MAAIC,UAAU,iCAAiCI,EAAc,C,+ECC/D,MAAMC,EAAMP,IAAoC,IAAnC,MAAEQ,EAAK,SAAEC,GAAoBT,EAC/C,MAAMU,GAAeC,EAAAA,EAAAA,KAEfC,EAAY,GAAGJ,EAAQ,GAAGA,OAAa,KAAKE,EAAaF,QACzDK,EAAU,GAAGH,EAAaI,UAAUL,EAASM,UAAY,KAE/D,OACEd,EAAAA,cAAAA,EAAAA,SAAA,KAEEA,EAAAA,cAAA,QAAMe,KAAK,OACXf,EAAAA,cAAA,aAAQW,GACRX,EAAAA,cAAA,QAAMgB,SAAS,YAAYC,QAAQ,UACnCjB,EAAAA,cAAA,QAAMgB,SAAS,eAAeC,QAASR,EAAaF,QACpDP,EAAAA,cAAA,QAAMgB,SAAS,UAAUC,QAAQ,YACjCjB,EAAAA,cAAA,QAAMgB,SAAS,WAAWC,QAASN,IACnCX,EAAAA,cAAA,QAAMgB,SAAS,iBAAiBC,QAASR,EAAaS,cACtDlB,EAAAA,cAAA,QAAMgB,SAAS,SAASC,QAASL,IAChC,C,4GCfA,MAAMO,EAAYpB,IAA8B,IAA7B,IAAEqB,GAAqBrB,EAO/C,OACEC,EAAAA,cAACqB,EAAAA,EAAOC,IAAG,CACTC,WAAY,CAAEC,MAAO,MACrBC,WAAY,CACVC,KAAM,SACNC,QAAS,GACTC,UAAW,OAGb5B,EAAAA,cAAA,UACEC,UAAU,yHACV4B,QAjBqDC,IACzDA,EAAEC,iBACFD,EAAEE,kBACFC,EAAAA,EAAYC,KAAKC,EAAAA,EAAOf,IAAIA,GAAM,CAAEgB,MAAOxC,EAAAA,EAAWC,SAAU,GAgB3DuB,GAEQ,C,kJCtBV,MAAMiB,EAAatC,IAKF,IALG,MACzBQ,EAAK,KACL+B,EAAI,KACJC,EAAI,WACJC,GACgBzC,EAChB,OACEC,EAAAA,cAAA,cACEA,EAAAA,cAACF,EAAAA,EAAU,MACXE,EAAAA,cAACI,EAAAA,EAAO,KAAEG,GACVP,EAAAA,cAAA,OAAKC,UAAU,sBACbD,EAAAA,cAAA,OAAKC,UAAU,gCAAgC,GAAGqC,OAAUE,cAC5DxC,EAAAA,cAAA,OAAKC,UAAU,qBACZsC,EAAKE,KAAKrB,GACTpB,EAAAA,cAACmB,EAAAA,EAAS,CAACuB,IAAKtB,EAAKA,IAAKA,QAIzB,EClBAuB,EAAa5C,IAA+B,IAA9B,KAAE6C,GAAuB7C,EAClD,OACEC,EAAAA,cAAA,eACEA,EAAAA,cAACqC,EAAUQ,OAAAC,OAAA,GAAKF,EAAKG,YAAW,CAAEP,WAAYI,EAAKJ,cAU3C,ECIDQ,EAA0BC,GACrCjD,EAAAA,cAACM,EAAAA,EAAGuC,OAAAC,OAAA,CAACvC,MAAO0C,EAAUC,KAAKC,eAAeJ,YAAYxC,OAAW0C,IASnE,MANqBlD,IAEoC,IAFnC,KACpBmD,GACkDnD,EAClD,OAAOC,EAAAA,cAAC2C,EAAU,CAACC,KAAMM,EAAKC,gBAAkB,C","sources":["webpack://hanse-kim.dev/./src/_libs/constants/link-states.ts","webpack://hanse-kim.dev/./src/components/common/back-button.tsx","webpack://hanse-kim.dev/./src/components/common/heading.tsx","webpack://hanse-kim.dev/./src/components/common/seo.tsx","webpack://hanse-kim.dev/./src/components/common/tag-button.tsx","webpack://hanse-kim.dev/./src/components/screen/post-screen/post-header.tsx","webpack://hanse-kim.dev/./src/components/screen/post-screen/index.tsx","webpack://hanse-kim.dev/./src/templates/{post}.tsx"],"sourcesContent":["export const linkStates = {\n  toLower: {\n    toLower: true,\n  },\n};\n","import React from 'react';\nimport { NavButton } from '../layout/header/nav-button';\n\ntype BackButtonProps = {};\n\nexport const BackButton = ({}: BackButtonProps) => {\n  return (\n    <div className=\"ml-24 -mb-24 mt-36 w-fit\">\n      <NavButton toBack>{'< 이전 페이지로'}</NavButton>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype HeadingProps = {\n  children?: React.ReactNode;\n};\n\nexport const Heading = ({ children }: HeadingProps) => {\n  return <h1 className=\"px-24 mt-48 mb-24 text-36-700\">{children}</h1>;\n};\n","import { HeadProps } from 'gatsby';\nimport React from 'react';\nimport { useSiteMetadata } from 'src/hooks/use-site-metadata';\n\ntype SeoProps = HeadProps & {\n  title?: string;\n};\n\nexport const Seo = ({ title, location }: SeoProps) => {\n  const siteMetadata = useSiteMetadata();\n\n  const pageTitle = `${title ? `${title} | ` : ''}${siteMetadata.title}`;\n  const pageUrl = `${siteMetadata.siteUrl}${location.pathname || ''}`;\n\n  return (\n    <>\n      {/* SEO */}\n      <html lang=\"ko\" />\n      <title>{pageTitle}</title>\n      <meta property=\"og:locale\" content=\"ko_KR\" />\n      <meta property=\"og:site_name\" content={siteMetadata.title} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={pageTitle} />\n      <meta property=\"og:description\" content={siteMetadata.description} />\n      <meta property=\"og:url\" content={pageUrl} />\n    </>\n  );\n};\n","import { motion } from 'framer-motion';\nimport React, { MouseEventHandler } from 'react';\nimport { linkStates } from 'src/_libs/constants/link-states';\nimport { routes } from 'src/_libs/constants/routes';\nimport { RouterUtils } from 'src/_libs/utils/router.utils';\n\ntype TagButtonProps = {\n  tag: string;\n};\n\nexport const TagButton = ({ tag }: TagButtonProps) => {\n  const handleClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    RouterUtils.push(routes.tag(tag), { state: linkStates.toLower });\n  };\n\n  return (\n    <motion.div\n      whileHover={{ scale: 1.15 }}\n      transition={{\n        type: 'spring',\n        damping: 20,\n        stiffness: 1500,\n      }}\n    >\n      <button\n        className=\"px-8 pt-3 pb-4 transition-colors rounded-4 bg-border text-main text-14-400 desktop:hover:text-bg desktop:hover:bg-main\"\n        onClick={handleClick}\n      >\n        {tag}\n      </button>\n    </motion.div>\n  );\n};\n","import React from 'react';\nimport { MarkdownRemark } from 'src/_libs/types/markdown-remark';\nimport { BackButton } from 'src/components/common/back-button';\nimport { Heading } from 'src/components/common/heading';\nimport { TagButton } from 'src/components/common/tag-button';\n\ntype PostHeaderProps = MarkdownRemark['frontmatter'] & {\n  timeToRead: number;\n};\n\nexport const PostHeader = ({\n  title,\n  date,\n  tags,\n  timeToRead,\n}: PostHeaderProps) => {\n  return (\n    <header>\n      <BackButton />\n      <Heading>{title}</Heading>\n      <div className=\"pl-24 -mt-24 mb-36\">\n        <div className=\"text-18-400 text-text-footer\">{`${date} · ${timeToRead} min read`}</div>\n        <div className=\"flex gap-12 mt-12\">\n          {tags.map((tag) => (\n            <TagButton key={tag} tag={tag} />\n          ))}\n        </div>\n      </div>\n    </header>\n  );\n};\n","import React from 'react';\nimport { MarkdownRemark } from 'src/_libs/types/markdown-remark';\nimport { CustomImage } from 'src/components/common/custom-image';\nimport { PostHeader } from './post-header';\nimport { Markdown } from './markdown';\n\ntype PostScreenProps = {\n  post: MarkdownRemark;\n};\n\nexport const PostScreen = ({ post }: PostScreenProps) => {\n  return (\n    <article>\n      <PostHeader {...post.frontmatter} timeToRead={post.timeToRead} />\n      {/* {post.frontmatter.thumbnail && (\n        <CustomImage\n          className=\"border border-solid mb-36 - 1 border-border\"\n          src={post.frontmatter.thumbnail?.publicURL}\n          alt={post.frontmatter.title}\n          ratio={9 / 21}\n        />\n      )}\n      <Markdown html={post.html} /> */}\n    </article>\n  );\n};\n","import { graphql, HeadFC, type PageProps } from 'gatsby';\nimport React from 'react';\nimport { MarkdownRemark } from 'src/_libs/types/markdown-remark';\nimport { Seo } from 'src/components/common/seo';\nimport { PostScreen } from 'src/components/screen/post-screen';\n\ninterface DataType {\n  markdownRemark: MarkdownRemark;\n}\n\nexport const pageQuery = graphql`\n  query ($id: String) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        tags\n        thumbnail {\n          publicURL\n        }\n      }\n      timeToRead\n    }\n  }\n`;\n\nexport const Head: HeadFC<DataType> = (pageProps) => (\n  <Seo title={pageProps.data.markdownRemark.frontmatter.title} {...pageProps} />\n);\n\nconst PostTemplate = ({\n  data,\n}: PageProps<DataType, object, { referrer: string }>) => {\n  return <PostScreen post={data.markdownRemark} />;\n};\n\nexport default PostTemplate;\n"],"names":["linkStates","toLower","BackButton","_ref","React","className","NavButton","toBack","Heading","children","Seo","title","location","siteMetadata","useSiteMetadata","pageTitle","pageUrl","siteUrl","pathname","lang","property","content","description","TagButton","tag","motion","div","whileHover","scale","transition","type","damping","stiffness","onClick","e","preventDefault","stopPropagation","RouterUtils","push","routes","state","PostHeader","date","tags","timeToRead","map","key","PostScreen","post","Object","assign","frontmatter","Head","pageProps","data","markdownRemark"],"sourceRoot":""}