{"componentChunkName":"component---src-templates-{post}-tsx-content-file-path-null","path":"/2022/03-05-idomatic-expression-with-logical-operation/","result":{"data":{"markdownRemark":{"html":"<h2>논리 연산자</h2>\n<p>논리 연산자란 조건문에서 흔히 사용하는 <code>&#x26;&#x26;</code>(AND), <code>||</code>(OR), <code>!</code>(NOT) 등의 연산자를 말합니다.</p>\n<ul>\n<li>\n<p><code>A &#x26;&#x26; B</code>: A가 참이면 B를, 거짓이면 A를 리턴한다.</p>\n</li>\n<li>\n<p><code>A || B</code>: A가 참이면 A를, 거짓이면 B를 리턴한다.</p>\n</li>\n<li>\n<p><code>!A</code>: A가 참이면 <code>false</code>를, 거짓이면 <code>true</code>를 리턴합니다.</p>\n</li>\n</ul>\n<p>여기서 말하는 참(Truthy), 거짓(Falsy)은 <code>Boolean</code> 타입으로 형변환을 할 때 <code>true</code>로 변환될 수 있는가 아닌가를 말합니다. JavaScript에선 다음의 경우는 모두 <code>false</code>로 변환되고, 그 이외의 값은 <code>true</code>로 변환됩니다.</p>\n<ul>\n<li><code>false</code></li>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>0</code>, <code>-0</code>, <code>0n</code>, <code>NaN</code></li>\n<li><code>\"\"</code></li>\n</ul>\n<p>빈 배열(<code>[]</code>)이나 빈 객체(<code>{}</code>)는 거짓이 아닙니다. 파이썬과 대조적인 부분으로 주의가 필요합니다.</p>\n<h2>조건부 표현식</h2>\n<p>함수를 정의할 때 이런 식으로 간단한 예외 처리를 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">someObject<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// value가 유효한 값이 아닐 때 someObject.value로 대체한다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">=</span> someObject<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때 논리 연산자를 활용하면 보다 간결하게 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">someObject<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// value가 유효한 값이 아닐 때 someObject.value로 대체한다</span>\n    value <span class=\"token operator\">=</span> value <span class=\"token operator\">||</span> someObject<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 어떤 값을 강제로 <code>Boolean</code> 값으로 변환하고 싶을 때는 <code>!</code>를 두 번 사용하면 된다. 첫번째 <code>!</code>에서 해당 값에 반대되는 <code>Boolean</code> 값을 받고, 거기에 한 번 더 <code>!</code>를 사용해 원래의 <code>Boolean</code> 값을 받는 것이다. 값의 유효성 검사를 할 때 유용하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isValidProfile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">profile</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// profile, profile.name, profile.age 모두 유효한 값일 때 true, 아니면 false를 리턴한다</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>\n    profile <span class=\"token operator\">&amp;&amp;</span>\n    profile<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token keyword\">typeof</span> profile<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span>\n    profile<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token keyword\">typeof</span> profile<span class=\"token punctuation\">.</span>age <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예에서 만약 <code>!!</code>가 없다면 <code>Boolean</code>이 아닌 값(<code>undefined</code>, <code>null</code> 등)을 리턴할 가능성이 있다.</p>\n<br />\n<h2>참고 자료</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||) - JavaScript | MDN (mozilla.org)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!) - JavaScript | MDN (mozilla.org)</a></li>\n</ul>","frontmatter":{"title":"논리 연산자를 이용한 간단한 조건부 표현식","date":"2022-03-05","tags":["TIL","JavaScript"],"thumbnail":null},"timeToRead":1}},"pageContext":{"id":"bafc7b3a-aa65-5b7e-bfc3-218ef73b9851"}},"staticQueryHashes":["1147043159"],"slicesMap":{}}