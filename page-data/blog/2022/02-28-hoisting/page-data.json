{"componentChunkName":"component---src-templates-{post}-tsx-content-file-path-null","path":"/blog/2022/02-28-hoisting/","result":{"data":{"markdownRemark":{"html":"<h2>요약</h2>\n<p>호이스팅이란 JavaScript의 특징으로, 함수나 변수의 선언을 코드의 최상단으로 끌어올린 것처럼 동작하는 방식을 말합니다.</p>\n<p>호이스팅은 JavaScript가 함수 단위 스코프를 따르는 언어이기 때문에 발생합니다. 한 함수 내에서 함수나 변수는 함수 전체에 걸쳐 정의되기 때문에, 필연적으로 함수 최상단에서 선언된 것과 같은 동작을 합니다.</p>\n<h2>JavaScript의 함수 단위 스코프와 호이스팅</h2>\n<p>과거(ES6 이전) JavaScript의 특징 중 하나는 함수 단위 스코프를 갖는다는 것이었습니다. 블록 단위 스코프를 갖는 타 언어와 달리 JavaScript는 함수 내의 모든 변수는 함수 전체에 걸쳐 정의됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 i는 if문 안에서 선언된 i와 같다!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined (if문에 진입하지 않았으므로 i는 10으로 초기화되지 않음)</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 (i는 if문에 들어가 10으로 초기화됨)</span></code></pre></div>\n<p>위 예시에서 에러가 아닌 <code>undefined</code>가 출력되는 것을 확인할 수 있습니다. 즉 실제 선언부까지 가지 않더라도, 함수에 진입한 시점에서 이미 <code>i</code>는 선언된 상태와 같습니다.</p>\n<p>마치 변수의 선언부와 초기화를 따로 떼어내고 선언부를 스코프 맨 위로 끌어올린 것처럼 동작한다고 해서 이를 <strong>호이스팅(hoisting, 끌어올림)</strong> 이라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 위 함수는 마치 아래처럼 동작한다.</span>\n<span class=\"token comment\">// 실제로 코드가 이런 식으로 변환되는 것은 아니고</span>\n<span class=\"token comment\">// 메모리 상에서 이처럼 동작한다는 뜻!</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// i의 선언부</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i 초기화</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Hoisting\">MDN</a>에서는 호이스팅을 아래와 같이 정의하고 있습니다.</p>\n<blockquote>\n<p><em>JavaScript에서 <strong>호이스팅</strong>(hoisting)이란, 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미합니다.</em></p>\n</blockquote>\n<h2>호이스팅의 특징</h2>\n<h3>var</h3>\n<p><code>var</code>로 선언한 변수는 호이스팅되어 <code>undefined</code>로 초기화됩니다. 따라서 초기화 전에 사용해도 오류는 발생하지 않습니다.</p>\n<h3>let과 const</h3>\n<p><code>let</code>, <code>const</code>로 선언한 변수와 상수는 호이스팅이 되지 않는다고 알려져 있기도 합니다. 엄밀히 말하자면 호이스팅은 일어나지만(즉 메모리 상에 공간은 할당되지만) 값이 초기화되지 않습니다. 이를 변수의 <strong>일시적 사각지대(Temporal Dead Zone, TDZ)</strong> 라고 하며, 어떤 식으로든 사용하려 하면 <code>ReferenceError</code>가 발생합니다.</p>\n<h3>초기화는 호이스팅되지 않는다</h3>\n<p>끌어올려지는 것은 선언(Declare) 뿐이고 초기화(Initialize)는 끌어올려지지 않습니다. 따라서 <code>var</code>로 선언한 변수를 정의한 위치보다 앞에서 사용할 수 있다 해도, 단지 오류만 나지 않을 뿐이지 초기화 전까지는 그 값을 사용할 수 없습니다.</p>\n<h3>함수 선언은 호이스팅된다</h3>\n<p>함수 선언은 호이스팅되며 정의된 위치보다 앞에서 자유롭게 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">print_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello world!</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print_hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>함수 표현식은 호이스팅되지 않는다</h3>\n<p>표현식으로 정의된 함수는 자신이 할당된 변수를 통해 참조됩니다. 그리고 변수의 초기화는 호이스팅되지 않으므로 함수 표현식 역시 자신이 정의된 위치 이전에는 사용할 수 없습니다.</p>\n<br />\n<h2>호이스팅의 쓰임새</h2>\n<p>함수 선언의 호이스팅은 함수를 정의한 순서에 상관 없이 사용할 수 있다는 점에서 유용하게 사용할 수 있습니다.</p>\n<p>단 변수의 호이스팅은 잠재적인 버그의 원인이 됩니다. 과거에는 예상치 못한 동작을 예방하기 위해 함수에서 사용하는 모든 변수를 함수 시작 부분에 선언하는 등의 컨벤션이 존재하기도 했습니다. 현재는 블록 단위 스코프를 따르는 <code>let</code>과 <code>const</code>가 있으므로 <code>var</code> 키워드 및 변수의 호이스팅은 일반적으로 더 이상 사용되지 않습니다.</p>\n<br />\n<h2>참고 자료</h2>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Hoisting\">호이스팅 - 용어 사전 | MDN (mozilla.org)</a></p>\n</li>\n<li>\n<p><a href=\"https://www.w3schools.com/js/js_hoisting.asp\">JavaScript Hoisting (w3schools.com)</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/62806172/is-there-any-benefit-from-hoisting\">javascript - Is there any benefit from hoisting? - Stack Overflow</a></p>\n</li>\n<li>\n<p>데이비드 플래너건, 『자바스크립트 완벽 가이드(6판)』</p>\n</li>\n</ul>","frontmatter":{"title":"호이스팅(Hoisting)","date":"2022-02-28","tags":["JavaScript"],"thumbnail":null},"timeToRead":2}},"pageContext":{"id":"87dc0567-0b9d-5cc8-aae3-cbfd66117cf8"}},"staticQueryHashes":["1147043159"],"slicesMap":{}}