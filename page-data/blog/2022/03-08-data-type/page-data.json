{"componentChunkName":"component---src-templates-{post}-tsx-content-file-path-null","path":"/blog/2022/03-08-data-type/","result":{"data":{"markdownRemark":{"html":"<h2>요약</h2>\n<p>데이터 타입이란 프로그래밍에서 여러 종류의 데이터를 식별하기 위한 분류입니다.</p>\n<p>JavaScript는 동적 타입 언어로, 변수의 타입이 고정되지 않으며 모든 타입의 값으로 할당 및 재할당이 가능합니다.</p>\n<p>JavaScript의 데이터 타입은 크게 원시 타입과 객체 타입으로 나뉩니다.</p>\n<ul>\n<li>원시 타입은 변경할 수 없는 값을 갖는 타입이며, 숫자, 문자열, 불리언 등이 포함됩니다.</li>\n<li>원시 타입이 아닌 모든 값은 객체 타입이며, 변수에 할당할 때 원시 타입은 값 자체를 저장하는 반면, 객체 타입은 실제 객체 데이터를 저장하는 메모리의 주소(참조 값)를 저장합니다.</li>\n</ul>\n<h2>데이터 타입</h2>\n<p>프로그래밍에 있어 <strong>데이터 타입(Data type)</strong>, 또는 <strong>타입(Type)</strong> 이란 정수, 실수, 문자 등 여러 종류의 데이터를 식별하기 위한 분류입니다.</p>\n<p>타입을 통해 식별할 수 있는 정보는 다음과 같습니다.</p>\n<ul>\n<li>데이터의 의미</li>\n<li>해당 타입에 가능한 값</li>\n<li>해당 타입을 통해 수행할 수 있는 연산</li>\n<li>데이터가 메모리에 저장되는 방식</li>\n<li>데이터를 메모리에서 참조하는 방식</li>\n</ul>\n<h2>JavaScript의 데이터 타입</h2>\n<p>C, C++, Java와 같은 <strong>정적 타입(static type) 언어</strong>는 변수를 선언할 때 타입을 명시적으로 선언합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정수 타입</span>\n<span class=\"token keyword\">boolean</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 불리언 타입</span></code></pre></div>\n<p>정적 타입 언어는 변수의 타입을 변경할 수 없고, 선언한 타입의 값만 할당할 수 있습니다. 또한 컴파일 시점에서 타입 체크를 수행하는데, 만약 선언한 타입에 맞지 않는 값을 할당했다면 에러를 발생시킵니다.</p>\n<p>반면 JavaScript는 <strong>동적 타입(dynamic type) 언어</strong>입니다. JavaScript의 변수는 선언 시에 타입을 지정하지 않으며, 모든 타입의 값으로 할당 및 재할당이 가능합니다. 즉 변수 선언 시에 타입을 결정하는 정적 타입 언어와 달리 동적 타입 언어는 값을 할당할 때 타입이 결정됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\nnum <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span></code></pre></div>\n<p>JavaScript의 데이터 타입은 크게 <strong>원시 타입(primative type)</strong> 과 <strong>객체 타입(object type)</strong> 으로 나뉩니다.</p>\n<h3>원시 타입</h3>\n<p>원시 타입이란 <strong>변경할 수 없는 값(immutable value, 불변 값)</strong> 을 갖는 기본적인 타입을 말한다. JavaScript는 현재(ES11~) 7개의 원시 타입이 존재합니다.</p>\n<ul>\n<li><strong>number</strong>: 숫자 타입. 정수와 실수를 구분하지 않으며 기본적으로 배정밀도 64비트 이진 형식의 값을 갖습니다. 숫자 값 이외에도 <code>Infinity</code>와 <code>-Infinity</code>(양의 무한, 음의 무한), <code>NaN</code>(Not a Number)이라는 특별한 세 가지 값을 갖습니다.</li>\n<li><strong>string</strong>: 문자열 타입. 텍스트 데이터를 나타내기 위해 사용합니다. 문자열이란 문자의 집합이며 하나의 문자는 16비트 부호 없는(unsigned) 정수 값입니다.</li>\n<li><strong>boolean</strong>: 논리적인 참/거짓을 나타내기 위한 타입. <code>true</code>, <code>false</code> 두 개의 값을 갖습니다.</li>\n<li><strong>undefined</strong>: 값을 할당하지 않은 변수를 나타내기 위한 타입. undefined 타입은 <code>undefined</code> 값 하나만을 갖습니다. JavaScript 엔진은 기본적으로 값을 할당하지 않은 변수를 <code>undefined</code>로 초기화합니다.</li>\n<li><strong>null</strong>: undefined가 JavaScript 엔진에 의해 '값이 할당되지 않음'을 나타내기 위한 타입이라면, null은 개발자가 명시적으로 '값이 없음'을 나타내기 위한 타입입니다. null 타입은 <code>null</code> 값 하나만을 갖습니다.</li>\n<li><strong>symbol</strong>: ES6에서 추가. 고유하고 변경 불가능한 원시 값을 갖는 타입. 객체의 프로퍼티 키로 사용합니다.</li>\n<li><strong>bigint</strong>: ES11에서 추가. 임의 정밀도(arbitrary-precision)의 정수 타입. number 타입에서는 오차가 발생하는 큰 수도 안전하게 저장하고 연산할 수 있습니다. 정수 끝에 n을 붙여 값을 표현합니다. (예: <code>9007199254740992n</code>)</li>\n</ul>\n<blockquote>\n<p>숫자나 문자열을 변경할 수 없다는 데에 조금 의아할 수 있습니다. 하지만 일반적으로 변수의 값을 변경한다고 하는 것은, 실제로 값 자체를 변경하는 것이 아니라 변수에 새로운 값을 할당하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a에 숫자 타입의 값 5를 할당한다</span>\na <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a의 값과 10을 + 연산하여 생성한 값을 a에 할당한다</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b에 문자열 타입의 값 string을 할당한다</span>\nb<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 직접 문자열을 변경하려 해도 불가능하다</span>\nb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b 문자열의 0번째 ~ 3번째 이전까지의 문자로 새로운 문자열을 만들어 b에 할당한다</span></code></pre></div>\n</blockquote>\n<h3>객체 타입</h3>\n<p>원시 타입이 아닌 모든 값은 객체 타입으로, 객체 타입은 원시 타입과 근본적으로 다릅니다.</p>\n<ul>\n<li>원시 타입의 값은 변경할 수 없지만(immutable) 객체는 변경 가능(mutable)합니다.</li>\n<li>원시 타입의 값은 고정된 크기의 데이터를 저장하는 스택(Stack) 메모리에 저장됩니다. 반면에 객체 타입의 값은 동적으로 크기가 변할 수 있는 데이터를 저장하는 힙(Heap) 메모리에 저장되며, 이 객체의 참조 값(메모리 주소)이 스택에 저장됩니다.</li>\n<li>비교문에서 원시 타입은 값 자체를 비교합니다. 반면 객체 타입은 값 자체가 아닌 참조값을 비교합니다.</li>\n<li>원시 타입은 함수 호출이 끝나면 자동으로 메모리에서 해제됩니다. 반면 힙 메모리에 저장되는 객체 타입은 참조하는 변수가 없을 때 가비지 컬렉터에 의해 해제됩니다.</li>\n</ul>\n<h2>참고 자료</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Data_type\">Data type - Wikipedia</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures\">JavaScript의 타입과 자료구조 - JavaScript | MDN (mozilla.org)</a></li>\n<li>이웅모, 『모던 자바스크립트 Deep Dive』</li>\n</ul>","frontmatter":{"title":"데이터 타입(Data Type)","date":"2022-03-08","tags":["JavaScript"],"thumbnail":null},"timeToRead":2}},"pageContext":{"id":"757f8d29-612c-5007-9d36-53e7c57dc55e"}},"staticQueryHashes":["1147043159"],"slicesMap":{}}