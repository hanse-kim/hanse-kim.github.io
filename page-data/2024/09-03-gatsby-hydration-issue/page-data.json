{"componentChunkName":"component---src-templates-{post}-tsx-content-file-path-null","path":"/2024/09-03-gatsby-hydration-issue/","result":{"data":{"markdownRemark":{"html":"<h2>개요</h2>\n<p>최근 블로그에 Framer Motion을 사용해 페이지 전환 효과를 추가하는 작업을 진행했습니다. 처음에는 간단하게 <code>Layout</code> 컴포넌트에 <code>AnimatePresence</code>를 추가하여 페이지 전환 시 애니메이션 효과를 적용하려고 했습니다.</p>\n<p>그러나 예상치 못한 문제들이 발생했고, 이로 인해 다양한 시도를 하며 문제를 해결하는 과정이 필요했습니다. 여기서 발생한 이슈와 이를 해결하기 위해 적용한 방법을 공유하려 합니다.</p>\n<h2>기존 구현 방식</h2>\n<p>기존에는 각 페이지 컴포넌트에서 <code>Layout</code> 컴포넌트를 사용하여 공통된 레이아웃을 적용했습니다. 페이지에서 레이아웃을 분리함으로써 페이지 간 일관성을 유지하고, 각 페이지에 쉽게 동일한 구조를 적용할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// .../pages/blog.tsx</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BlogPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pageProps<span class=\"token operator\">:</span> PageProps<span class=\"token operator\">&lt;</span>DataType<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span> <span class=\"token attr-name\">pageProps</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pageProps<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlogScreen</span></span> <span class=\"token attr-name\">posts</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pageProps<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Layout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BlogPage<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 <code>Layout</code> 컴포넌트에 Framer Motion의 <code>AnimatePresence</code> 컴포넌트를 추가하여 페이지 전환 효과를 구현하려 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// .../layout/index.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> LayoutProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnimatePresence</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wait<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">presenceAffectsLayout</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>motion.div</span>\n            <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pageProps<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">initial</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'initial'</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">animate</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'enter'</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">exit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'exit'</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">variants</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>variants<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">transition</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> duration<span class=\"token operator\">:</span> pageTransitionDuration <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>motion.div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AnimatePresence</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Main</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Footer</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>첫번째 문제: 레이아웃 언마운트 이슈</h2>\n<p>첫 번째 문제는 <code>motion.div</code>의 exit 애니메이션이 작동하지 않는 것이었습니다. 확인해보니 페이지 이동 시 <code>Layout</code> 컴포넌트가 언마운트되고 다시 마운트되는 과정에서 <code>AnimatePresence</code>도 함께 언마운트되고 있었던 것이 원인이었습니다.</p>\n<p>이를 방지하기 위해서는 페이지 이동 시 <code>Layout</code>이 언마운트되지 않고 계속 유지되어야 했고, Gatsby Browser API 중 하나인 <code>wrapPageElement</code>를 사용해서 해결할 수 있었습니다.</p>\n<blockquote>\n<p><a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/#wrapPageElement\">wrapPageElement</a></p>\n<p>This is useful for setting wrapper components around pages that won’t get unmounted on page changes. For setting context providers, use wrapRootElement.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// gatsby-browser.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wrapPageElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  element<span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> WrapPageElementBrowserArgs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span> <span class=\"token attr-name\">pageProps</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Layout</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이를 통해 <code>motion.div</code>의 <code>exit</code> 애니메이션이 동작하지 않는 문제가 해결되었고, 또 매 페이지마다 <code>Layout</code> 컴포넌트를 삽입해야 하는 번거로움이 사라졌습니다.</p>\n<h2>두번째 문제: Hydration failed 이슈</h2>\n<p>개발 환경에서는 문제가 없었지만, production 환경에서 Hydration에 실패한다는 경고가 발생했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.</code></pre></div>\n<p>Gatsby에서는 초기 빌드 시 SSR을 통해 정적인 HTML을 생성합니다. 클라이언트에서는 이 정적 HTML을 React의 관리 하에 두에 재사용하는데, 이 과정을 Hydration이라고 합니다. 위 경고는 SSR한 HTML이 클라이언트에서 기대한 DOM 구조와 일치하지 않아 Hydration에 실패하고, 불필요한 렌더링이 발생한다는 내용이었습니다.</p>\n<p>경고에는 구체적인 사례들까지 제시되어 있었지만, 제게 직접적으로 해당하는 내용은 없어서 다른 원인을 좀 더 살펴봐야 했습니다.</p>\n<h3>원인 1) gatsby-ssr 설정 누락</h3>\n<p>첫 번째 원인은 Gatsby SSR API의 <code>wrapPageElement</code>이 누락된 것이었습니다.</p>\n<p>SSR 시에는 gatsby-browser의 <code>wrapPageElement</code>가 적용되지 않기 때문에 레이아웃이 빠진 채 HTML이 생성되는 문제가 있었고, 이를 해결하기 위해 gatsby-ssr에도 동일한 설정을 추가했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// gatsby-ssr.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wrapPageElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  element<span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> WrapPageElementBrowserArgs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span> <span class=\"token attr-name\">pageProps</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Layout</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>원인 2) 인라인 &#x3C;style> 태그</h3>\n<p>추가로 확인해보니, 컴포넌트에서 <code>&#x3C;style></code> 태그로 CSS를 직접 삽입하면서 문제가 발생했습니다. CSS를 <code>&#x3C;style></code>의 <code>children</code>으로 삽입한 것이, SSR 과정에서 HTML entity로 인코딩되면서 태그 내용의 불일치가 발생한 것입니다.</p>\n<ul>\n<li>SSR된 HTML:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">#post-list a&amp;gt<span class=\"token punctuation\">;</span>div <span class=\"token punctuation\">{</span>...<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>클라이언트:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#post-list a>div</span> <span class=\"token punctuation\">{</span>...<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이를 해결하기 위해 <code>&#x3C;style></code> 태그에 <code>dangerouslySetInnerHTML</code>을 사용하여 CSS를 삽입하는 방식으로 수정했습니다. 이 방법을 통해 클라이언트와 서버의 DOM이 일치하게 되었고, 최종적으로 Hydration 오류가 완전히 해결되었습니다.</p>\n<h2>결론</h2>\n<p>이번 작업에서는 Framer Motion을 이용한 페이지 전환 애니메이션 구현 중 발생한 문제들을 해결했습니다. <code>Layout</code>의 언마운트로 애니메이션이 중단되는 문제는 <code>wrapPageElement</code> API를 사용해 해결했고, production 환경에서 발생한 Hydration 오류는 SSR과 클라이언트 간의 DOM 불일치를 수정해 해결했습니다.</p>\n<p>이 과정을 통해 Gatsby와 Framer Motion의 동작 방식에 대한 이해를 넓혔으며, 앞으로도 비슷한 문제에 대비할 수 있게 되었습니다. 이 글이 유사한 상황을 겪는 분들에게 도움이 되길 바랍니다.</p>","frontmatter":{"title":"Framer Motion 페이지 전환 구현 중 발생한 이슈와 해결","date":"2024-09-03","tags":["Gatsby","React","Troubleshooting"],"thumbnail":null},"timeToRead":3}},"pageContext":{"id":"6a6ebe8d-4691-5011-802d-e0f45377b1e0"}},"staticQueryHashes":["1147043159"],"slicesMap":{}}