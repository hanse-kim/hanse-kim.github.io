{"version":3,"file":"component---src-pages-blog-tsx-466ee5dbd53d0a31a10c.js","mappings":"kJAAO,MAAMA,EAAa,CACxBC,QAAS,CACPA,SAAS,G,oECIN,MAAMC,EAAUC,IAAiC,IAAhC,SAAEC,GAAwBD,EAChD,OAAOE,EAAAA,cAAA,MAAIC,UAAU,iCAAiCF,EAAc,C,+ECC/D,MAAMG,EAAMJ,IAAoC,IAAnC,MAAEK,EAAK,SAAEC,GAAoBN,EAC/C,MAAMO,GAAeC,EAAAA,EAAAA,KAEfC,EAAY,GAAGJ,EAAQ,GAAGA,OAAa,KAAKE,EAAaF,QACzDK,EAAU,GAAGH,EAAaI,UAAUL,EAASM,UAAY,KAE/D,OACEV,EAAAA,cAAAA,EAAAA,SAAA,KAEEA,EAAAA,cAAA,QAAMW,KAAK,OACXX,EAAAA,cAAA,aAAQO,GACRP,EAAAA,cAAA,QAAMY,SAAS,YAAYC,QAAQ,UACnCb,EAAAA,cAAA,QAAMY,SAAS,eAAeC,QAASR,EAAaF,QACpDH,EAAAA,cAAA,QAAMY,SAAS,UAAUC,QAAQ,YACjCb,EAAAA,cAAA,QAAMY,SAAS,WAAWC,QAASN,IACnCP,EAAAA,cAAA,QAAMY,SAAS,iBAAiBC,QAASR,EAAaS,cACtDd,EAAAA,cAAA,QAAMY,SAAS,SAASC,QAASL,IAChC,C,wFCZA,MAAMO,EAAWf,EAAAA,MACtBF,IAA8C,IAA7C,KAAEkB,EAAI,QAAEC,EAAO,OAAEC,GAAuBpB,EACvC,OACEE,EAAAA,cAACmB,EAAAA,KAAI,CACHC,GAAIJ,EAAKK,OAAOC,MAAQ,GACxBC,aAAcA,IAAMN,EAAQD,EAAKK,OAAOC,MACxCE,aAAcA,IAAMN,EAAOF,EAAKK,OAAOC,MACvC,UAASN,EAAKK,OAAOC,KACrBG,MAAO9B,EAAAA,EAAWC,SAyBb,ICtCA8B,EAAkB5B,IAA8B,IAA7B,MAAE6B,GAAsB7B,EACtD,MAAM,EAAC8B,EAAW,EAAEC,IAAkBC,EAAAA,EAAAA,UAAwB,MAExDC,GAAiBC,EAAAA,EAAAA,cAAY,KACjCH,EAAe,KAAK,GACnB,IAEH,OACE7B,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQ,0JAA0J4B,sEAClK5B,EAAAA,cAAA,WACEiC,GAAG,YACHhC,UAAU,+GAET0B,EAAMO,KAAKlB,GACVhB,EAAAA,cAACe,EAAQ,CACPoB,IAAKnB,EAAKK,OAAOC,KACjBN,KAAMA,EACNC,QAASY,EACTX,OAAQa,OAIb,C,yICtBA,MAAMK,EAAatC,IAAgC,IAA/B,MAAE6B,GAAwB7B,EACnD,OACEE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACH,EAAAA,EAAO,KAAE,SAAS8B,EAAMU,iBACzBrC,EAAAA,cAAC0B,EAAAA,EAAe,CAACC,MAAOA,IACvB,ECsBMW,EAAgBC,GAAcvC,EAAAA,cAACE,EAAAA,EAAQqC,GAMpD,MAJiBzC,IAAmC,IAAlC,KAAE0C,GAA2B1C,EAC7C,OAAOE,EAAAA,cAACoC,EAAU,CAACT,MAAOa,EAAKC,kBAAkBC,OAAS,C","sources":["webpack://hanse-kim.dev/./src/_libs/constants/link-states.ts","webpack://hanse-kim.dev/./src/components/common/heading.tsx","webpack://hanse-kim.dev/./src/components/common/seo.tsx","webpack://hanse-kim.dev/./src/components/screen/blog-screen/post-list-section/post-card.tsx","webpack://hanse-kim.dev/./src/components/screen/blog-screen/post-list-section/index.tsx","webpack://hanse-kim.dev/./src/components/screen/blog-screen/index.tsx","webpack://hanse-kim.dev/./src/pages/blog.tsx"],"sourcesContent":["export const linkStates = {\n  toLower: {\n    toLower: true,\n  },\n};\n","import React from 'react';\n\ntype HeadingProps = {\n  children?: React.ReactNode;\n};\n\nexport const Heading = ({ children }: HeadingProps) => {\n  return <h1 className=\"px-24 mt-48 mb-24 text-36-700\">{children}</h1>;\n};\n","import { HeadProps } from 'gatsby';\nimport React from 'react';\nimport { useSiteMetadata } from 'src/hooks/use-site-metadata';\n\ntype SeoProps = HeadProps & {\n  title?: string;\n};\n\nexport const Seo = ({ title, location }: SeoProps) => {\n  const siteMetadata = useSiteMetadata();\n\n  const pageTitle = `${title ? `${title} | ` : ''}${siteMetadata.title}`;\n  const pageUrl = `${siteMetadata.siteUrl}${location.pathname || ''}`;\n\n  return (\n    <>\n      {/* SEO */}\n      <html lang=\"ko\" />\n      <title>{pageTitle}</title>\n      <meta property=\"og:locale\" content=\"ko_KR\" />\n      <meta property=\"og:site_name\" content={siteMetadata.title} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={pageTitle} />\n      <meta property=\"og:description\" content={siteMetadata.description} />\n      <meta property=\"og:url\" content={pageUrl} />\n    </>\n  );\n};\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { linkStates } from 'src/_libs/constants/link-states';\nimport { MarkdownRemark } from 'src/_libs/types/markdown-remark';\nimport { CustomImage } from 'src/components/common/custom-image';\nimport { TagButton } from 'src/components/common/tag-button';\n\ntype PostCardProps = {\n  post: MarkdownRemark;\n  onHover: (postId: string) => void;\n  onBlur: (postId: string) => void;\n};\n\nexport const PostCard = React.memo(\n  ({ post, onHover, onBlur }: PostCardProps) => {\n    return (\n      <Link\n        to={post.fields.slug || ''}\n        onMouseEnter={() => onHover(post.fields.slug)}\n        onMouseLeave={() => onBlur(post.fields.slug)}\n        data-id={post.fields.slug}\n        state={linkStates.toLower}\n      >\n        {/* <div\n          className={`px-20 py-32 overflow-hidden group rounded-16 bg-bg outline outline-transparent outline-1 desktop:hover:outline-blur desktop:hover:drop-shadow-post tablet:outline-border`}\n        >\n          {post.frontmatter.thumbnail?.publicURL && (\n            <CustomImage\n              src={post.frontmatter.thumbnail?.publicURL}\n              alt={post.frontmatter.title}\n              className=\"border-solid rounded-8 border-1 border-border mb-18\"\n            />\n          )}\n          <h2 className=\"break-all text-32-700 line-clamp-2\">\n            {post.frontmatter.title}\n          </h2>\n          <div className=\"mt-8 text-text-quote\">{`${post.frontmatter.date} Â· ${post.timeToRead} min read`}</div>\n          <div className=\"flex gap-12 mt-12\">\n            {post.frontmatter.tags.map((tag) => (\n              <TagButton key={tag} tag={tag} />\n            ))}\n          </div>\n          <p className=\"w-full mt-16 text-text-footer text-18-300 line-clamp-2\">\n            {post.excerpt}\n          </p>\n        </div> */}\n      </Link>\n    );\n  }\n);\n","import React, { useCallback, useState } from 'react';\nimport { MarkdownRemark } from 'src/_libs/types/markdown-remark';\nimport { PostCard } from './post-card';\n\ntype PostListProps = {\n  posts: MarkdownRemark[];\n};\n\nexport const PostListSection = ({ posts }: PostListProps) => {\n  const [hoveredPost, setHoveredPost] = useState<string | null>(null);\n\n  const handleBlurPost = useCallback(() => {\n    setHoveredPost(null);\n  }, []);\n\n  return (\n    <>\n      <style>{`#post-list a>div {opacity: 1; transform: translateY(0px) scale(1); transition: all 0.25s;} @media (min-width:1081px) {#post-list:hover a:not([data-id=\"${hoveredPost}\"])>div {opacity: 0.4; transform: translateY(12px) scale(0.98);}}`}</style>\n      <section\n        id=\"post-list\"\n        className=\"grid grid-cols-3 p-24 gap-x-20 gap-y-32 tablet:grid-cols-2 mobile:flex mobile:flex-col mobile:items-stretch\"\n      >\n        {posts.map((post) => (\n          <PostCard\n            key={post.fields.slug}\n            post={post}\n            onHover={setHoveredPost}\n            onBlur={handleBlurPost}\n          />\n        ))}\n      </section>\n    </>\n  );\n};\n","import React from 'react';\nimport { MarkdownRemark } from 'src/_libs/types/markdown-remark';\nimport { Heading } from 'src/components/common/heading';\nimport { PostListSection } from './post-list-section';\n\ntype BlogScreenProps = {\n  posts: MarkdownRemark[];\n};\n\nexport const BlogScreen = ({ posts }: BlogScreenProps) => {\n  return (\n    <>\n      <Heading>{`Blog (${posts.length} posts)`}</Heading>\n      <PostListSection posts={posts} />\n    </>\n  );\n};\n","import { graphql, HeadFC, PageProps } from 'gatsby';\nimport React from 'react';\nimport { MarkdownRemark } from 'src/_libs/types/markdown-remark';\nimport { Seo } from '../components/common/seo';\nimport { BlogScreen } from '../components/screen/blog-screen';\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        id\n        frontmatter {\n          title\n          date(formatString: \"YYYY-MM-DD\")\n          tags\n          hide\n          thumbnail {\n            publicURL\n          }\n        }\n        timeToRead\n        excerpt(pruneLength: 200)\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`;\n\ntype DataType = {\n  allMarkdownRemark: {\n    nodes: MarkdownRemark[];\n  };\n};\n\nexport const Head: HeadFC = (pageProps) => <Seo {...pageProps} />;\n\nconst BlogPage = ({ data }: PageProps<DataType>) => {\n  return <BlogScreen posts={data.allMarkdownRemark.nodes} />;\n};\n\nexport default BlogPage;\n"],"names":["linkStates","toLower","Heading","_ref","children","React","className","Seo","title","location","siteMetadata","useSiteMetadata","pageTitle","pageUrl","siteUrl","pathname","lang","property","content","description","PostCard","post","onHover","onBlur","Link","to","fields","slug","onMouseEnter","onMouseLeave","state","PostListSection","posts","hoveredPost","setHoveredPost","useState","handleBlurPost","useCallback","id","map","key","BlogScreen","length","Head","pageProps","data","allMarkdownRemark","nodes"],"sourceRoot":""}