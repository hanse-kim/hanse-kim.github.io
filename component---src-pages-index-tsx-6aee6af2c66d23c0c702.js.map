{"version":3,"file":"component---src-pages-index-tsx-6aee6af2c66d23c0c702.js","mappings":"mJAAA,MAAMA,EAAc,WACdC,EAAgB,YAchBC,EAAY,CAACC,EAAKC,GAAkB,KACzC,MAAMC,EAASF,EAAIG,QAAQN,GAAcO,GAAU,IAAIA,EAAMC,kBAE7D,OAAIJ,EACIC,EAGJA,EAAOI,WAAW,KACdJ,EAAOK,MAAM,QADrB,CAEA,EAYDR,EAAUS,QAAWR,GAAQA,EAAIG,QAAQL,GAAgBM,GAAUA,EAAMG,MAAM,GAAGE,gBAElF,QCpCO,MAAMC,EAAS,CACpBC,KAAM,SACNC,MAAO,UACPC,KAAM,SACNC,IAAMA,GAAgB,SAASf,EAAUe,GAAK,M,qECAzC,IAAMC,EAAW,oBAAAA,IAAA,CAWrB,OAXqBA,EACfC,KAAP,SAAYC,EAAaC,GACvB,YADuC,IAAhBA,IAAAA,EAAmB,CAAC,IACpCC,EAAAA,EAAAA,UAASF,EAAK,IAAKC,GAC5B,EAACH,EAEMZ,QAAP,SAAec,EAAaC,GAC1B,YAD0C,IAAhBA,IAAAA,EAAmB,CAAC,IACvCC,EAAAA,EAAAA,UAASF,EAAK,CAAEd,SAAS,KAASe,GAC3C,EAACH,EAEMK,KAAP,WACE,OAAOD,EAAAA,EAAAA,WAAU,EACnB,EAACJ,CAAA,CAXqB,E,mGCDjB,MAAMM,EAAeA,IAAMC,EAAAA,cAAA,aAAO,aAUzC,UARkBC,MAChBC,EAAAA,EAAAA,YAAU,KACRT,EAAAA,EAAYZ,QAAQO,EAAAA,EAAOC,KAAK,GAC/B,IAEI,K","sources":["webpack://hanse-kim.dev/./node_modules/kebab-case/index.js","webpack://hanse-kim.dev/./src/_libs/constants/routes.ts","webpack://hanse-kim.dev/./src/_libs/utils/router.utils.ts","webpack://hanse-kim.dev/./src/pages/index.tsx"],"sourcesContent":["const KEBAB_REGEX = /\\p{Lu}/gu;\nconst REVERSE_REGEX = /-\\p{Ll}/gu;\n\n/**\n * Transforms a string into kebab-case.\n *\n * @example\n * kebabCase(\"helloWorld\"); // \"hello-world\"\n * kebabCase(\"HelloWorld\"); // \"-hello-world\"\n * kebabCase(\"HelloWorld\", false); // \"hello-world\"\n *\n * @param {string} str The string to transform\n * @param {boolean} keepLeadingDash Whether to keep the leading dash in case the string starts with an uppercase letter (default: true)\n * @returns The kebab-cased string\n */\nconst kebabCase = (str, keepLeadingDash = true) => {\n\tconst result = str.replace(KEBAB_REGEX, (match) => `-${match.toLowerCase()}`);\n\n\tif (keepLeadingDash) {\n\t\treturn result;\n\t}\n\n\tif (result.startsWith(\"-\")) {\n\t\treturn result.slice(1);\n\t}\n};\n\n/**\n * Transforms a kebab-cased string back to the original string.\n *\n * @example\n * kebabCase.reverse(\"hello-world\"); // \"helloWorld\"\n *\n * @param {string} str\n * @returns The original string, with the kebab-case transformation reversed\n */\nkebabCase.reverse = (str) => str.replace(REVERSE_REGEX, (match) => match.slice(1).toUpperCase());\n\nexport default kebabCase;\n","import kebabCase from 'kebab-case';\n\nexport const routes = {\n  blog: '/blog/',\n  about: '/about/',\n  tags: '/tags/',\n  tag: (tag: string) => `/tags/${kebabCase(tag, false)}/`,\n} as const;\n\nexport type Route = (typeof routes)[keyof typeof routes];\n","import { navigate } from 'gatsby';\n\ntype Options = {\n  state?: any;\n};\n\nexport class RouterUtils {\n  static push(url: string, options: Options = {}) {\n    return navigate(url, { ...options });\n  }\n\n  static replace(url: string, options: Options = {}) {\n    return navigate(url, { replace: true, ...options });\n  }\n\n  static back() {\n    return navigate(-1);\n  }\n}\n","import { HeadFC } from 'gatsby';\nimport React, { useEffect } from 'react';\nimport { RouterUtils } from '../_libs/utils/router.utils';\nimport { routes } from '../_libs/constants/routes';\n\nexport const Head: HeadFC = () => <title>Home Page</title>;\n\nconst IndexPage = () => {\n  useEffect(() => {\n    RouterUtils.replace(routes.blog);\n  }, []);\n\n  return null;\n};\n\nexport default IndexPage;\n"],"names":["KEBAB_REGEX","REVERSE_REGEX","kebabCase","str","keepLeadingDash","result","replace","match","toLowerCase","startsWith","slice","reverse","toUpperCase","routes","blog","about","tags","tag","RouterUtils","push","url","options","navigate","back","Head","React","IndexPage","useEffect"],"sourceRoot":""}