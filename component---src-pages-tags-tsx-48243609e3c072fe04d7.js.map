{"version":3,"file":"component---src-pages-tags-tsx-48243609e3c072fe04d7.js","mappings":"kJAAO,MAAMA,EAAa,CACxBC,QAAS,CACPA,SAAS,G,oECIN,MAAMC,EAAUC,IAAiC,IAAhC,SAAEC,GAAwBD,EAChD,OAAOE,EAAAA,cAAA,MAAIC,UAAU,2BAA2BF,EAAc,C,+ECCzD,MAAMG,EAAMJ,IAAoC,IAAnC,MAAEK,EAAK,SAAEC,GAAoBN,EAC/C,MAAMO,GAAeC,EAAAA,EAAAA,KAEfC,EAAY,GAAGJ,EAAQ,GAAGA,OAAa,KAAKE,EAAaF,QACzDK,EAAU,GAAGH,EAAaI,UAAUL,EAASM,UAAY,KAE/D,OACEV,EAAAA,cAAAA,EAAAA,SAAA,KAEEA,EAAAA,cAAA,QAAMW,KAAK,OACXX,EAAAA,cAAA,aAAQO,GACRP,EAAAA,cAAA,QAAMY,SAAS,YAAYC,QAAQ,UACnCb,EAAAA,cAAA,QAAMY,SAAS,eAAeC,QAASR,EAAaF,QACpDH,EAAAA,cAAA,QAAMY,SAAS,UAAUC,QAAQ,YACjCb,EAAAA,cAAA,QAAMY,SAAS,WAAWC,QAASN,IACnCP,EAAAA,cAAA,QAAMY,SAAS,iBAAiBC,QAASR,EAAaS,cACtDd,EAAAA,cAAA,QAAMY,SAAS,SAASC,QAASL,IAChC,C,sKCbA,MAAMO,EAAiBjB,IAAoC,IAAnC,KAAEkB,GAA2BlB,EAC1D,MAAM,SAAEmB,EAAQ,SAAEC,IAAaC,EAAAA,EAAAA,UAAQ,KACrC,IAAIF,EAAWG,OAAOC,iBAClBH,EAAW,EAKf,OAJAF,EAAKM,SAASC,IACZN,EAAWO,KAAKC,IAAIR,EAAUM,EAAIG,YAClCR,EAAWM,KAAKG,IAAIT,EAAUK,EAAIG,WAAW,IAExC,CAAET,WAAUC,WAAU,GAC5B,IAOH,OACElB,EAAAA,cAAA,WACEC,UAAU,0DACV2B,MAAO,CAAEC,SAAU,SAElBb,EACEc,UAAS,CAACC,EAAGC,IAAMA,EAAEN,WAAaK,EAAEL,aACpCO,KAAKV,IACJvB,SAAAA,cAACkC,EAAAA,KAAI,CACHC,GAAIC,EAAAA,EAAOb,IAAIA,EAAIc,OACnBpC,UAAU,0HACV2B,MAAO,CAAEC,UAhBUS,EAgBoBf,EAAIG,YAfnCY,EAAQrB,IAAaC,EAAWD,GAAY,EACrD,OAeCsB,MAAO5C,EAAAA,EAAWC,SAElBI,EAAAA,cAACwC,EAAAA,EAAOC,IAAG,CACTC,WAAY,CAAEC,MAAO,OACrB,GAAGpB,EAAIc,UAAUd,EAAIG,gBArBJY,KAuBtB,IACK,ECtCDM,EAAa9C,IAAgC,IAA/B,KAAEkB,GAAuBlB,EAClD,OACEE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACH,EAAAA,EAAO,KAAC,QACTG,EAAAA,cAACe,EAAc,CAACC,KAAMA,IACrB,ECSM6B,EAAQC,GAAqB9C,EAAAA,cAACE,EAAAA,EAAG6C,OAAAC,OAAA,CAAC7C,MAAM,QAAW2C,IAMhE,MAJiBhD,IAAmC,IAAlC,KAAEmD,GAA2BnD,EAE7C,OADAoD,QAAQC,IAAI,CAAEnC,KAAMiC,EAAKG,UAAUpC,OAC5BhB,EAAAA,cAAC4C,EAAU,CAAC5B,KAAMiC,EAAKG,UAAUpC,MAAQ,IAAM,C","sources":["webpack://hanse-kim.dev/./src/_libs/constants/link-states.ts","webpack://hanse-kim.dev/./src/components/common/heading.tsx","webpack://hanse-kim.dev/./src/components/common/seo.tsx","webpack://hanse-kim.dev/./src/components/screen/tags-screen/tag-list-section.tsx","webpack://hanse-kim.dev/./src/components/screen/tags-screen/index.tsx","webpack://hanse-kim.dev/./src/pages/tags.tsx"],"sourcesContent":["export const linkStates = {\n  toLower: {\n    toLower: true,\n  },\n};\n","import React from 'react';\n\ntype HeadingProps = {\n  children?: React.ReactNode;\n};\n\nexport const Heading = ({ children }: HeadingProps) => {\n  return <h1 className=\"px-24 my-48 text-36-700\">{children}</h1>;\n};\n","import { HeadProps } from 'gatsby';\nimport React from 'react';\nimport { useSiteMetadata } from 'src/hooks/use-site-metadata';\n\ntype SeoProps = HeadProps & {\n  title?: string;\n};\n\nexport const Seo = ({ title, location }: SeoProps) => {\n  const siteMetadata = useSiteMetadata();\n\n  const pageTitle = `${title ? `${title} | ` : ''}${siteMetadata.title}`;\n  const pageUrl = `${siteMetadata.siteUrl}${location.pathname || ''}`;\n\n  return (\n    <>\n      {/* SEO */}\n      <html lang=\"ko\" />\n      <title>{pageTitle}</title>\n      <meta property=\"og:locale\" content=\"ko_KR\" />\n      <meta property=\"og:site_name\" content={siteMetadata.title} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={pageTitle} />\n      <meta property=\"og:description\" content={siteMetadata.description} />\n      <meta property=\"og:url\" content={pageUrl} />\n    </>\n  );\n};\n","import { motion } from 'framer-motion';\nimport { Link } from 'gatsby';\nimport kebabCase from 'kebab-case';\nimport React, { useMemo } from 'react';\nimport { linkStates } from 'src/_libs/constants/link-states';\nimport { routes } from 'src/_libs/constants/routes';\nimport { Tag } from 'src/_libs/types/tag';\n\ntype TagListSectionProps = {\n  tags: Tag[];\n};\n\nexport const TagListSection = ({ tags }: TagListSectionProps) => {\n  const { minCount, maxCount } = useMemo(() => {\n    let minCount = Number.MAX_SAFE_INTEGER;\n    let maxCount = 0;\n    tags.forEach((tag) => {\n      minCount = Math.min(minCount, tag.totalCount);\n      maxCount = Math.max(maxCount, tag.totalCount);\n    });\n    return { minCount, maxCount };\n  }, []);\n\n  const getRelativeFontSize = (count: number) => {\n    const factor = (count - minCount) / (maxCount - minCount) + 1;\n    return `${factor}em`;\n  };\n\n  return (\n    <section\n      className=\"px-24 flex flex-wrap justify-center items-center gap-18\"\n      style={{ fontSize: '18px' }}\n    >\n      {tags\n        .toSorted((a, b) => b.totalCount - a.totalCount)\n        .map((tag) => (\n          <Link\n            to={routes.tag(tag.value)}\n            className=\"text-18-400 underline underline-offset-[0.2em] drop-shadow-transparent transition-shadow desktop:hover:drop-shadow-text\"\n            style={{ fontSize: getRelativeFontSize(tag.totalCount) }}\n            state={linkStates.toLower}\n          >\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n            >{`${tag.value} (${tag.totalCount})`}</motion.div>\n          </Link>\n        ))}\n    </section>\n  );\n};\n","import React from 'react';\nimport { Tag } from 'src/_libs/types/tag';\nimport { Heading } from 'src/components/common/heading';\nimport { TagListSection } from './tag-list-section';\n\ntype TagsScreenProps = {\n  tags: Tag[];\n};\n\nexport const TagsScreen = ({ tags }: TagsScreenProps) => {\n  return (\n    <>\n      <Heading>Tags</Heading>\n      <TagListSection tags={tags} />\n    </>\n  );\n};\n","import { graphql, type PageProps } from 'gatsby';\nimport React from 'react';\nimport { Tag } from 'src/_libs/types/tag';\nimport { Seo } from 'src/components/common/seo';\nimport { TagsScreen } from 'src/components/screen/tags-screen';\n\ninterface DataType {\n  tagsGroup: {\n    tags: Tag[];\n  };\n}\n\nexport const pageQuery = graphql`\n  query {\n    tagsGroup: allMarkdownRemark(limit: 2000) {\n      tags: group(field: { frontmatter: { tags: SELECT } }) {\n        value: fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport const Head = (props: PageProps) => <Seo title=\"Tags\" {...props} />;\n\nconst TagsPage = ({ data }: PageProps<DataType>) => {\n  console.log({ tags: data.tagsGroup.tags });\n  return <TagsScreen tags={data.tagsGroup.tags || []} />;\n};\nexport default TagsPage;\n"],"names":["linkStates","toLower","Heading","_ref","children","React","className","Seo","title","location","siteMetadata","useSiteMetadata","pageTitle","pageUrl","siteUrl","pathname","lang","property","content","description","TagListSection","tags","minCount","maxCount","useMemo","Number","MAX_SAFE_INTEGER","forEach","tag","Math","min","totalCount","max","style","fontSize","toSorted","a","b","map","Link","to","routes","value","count","state","motion","div","whileHover","scale","TagsScreen","Head","props","Object","assign","data","console","log","tagsGroup"],"sourceRoot":""}